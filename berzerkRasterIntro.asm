Vec_Text_Width      EQU      $C82B                        ;Default text width 
Vec_Str_Ptr         EQU      $C82C                        ;Temporary string pointer for Print_Str 
Vec_Counters        EQU      $C82E                        ;Six bytes of counters 
Vec_Counter_1       EQU      $C82E                        ;First counter byte 
Vec_Counter_2       EQU      $C82F                        ;Second counter byte 
Vec_Counter_3       EQU      $C830                        ;Third counter byte 
Vec_Counter_4       EQU      $C831                        ;Fourth counter byte 
Vec_Counter_5       EQU      $C832                        ;Fifth counter byte 
Vec_Counter_6       EQU      $C833                        ;Sixth counter byte 
Intensity_5F        EQU      $F2A5                        ; 
Wait_Recal          EQU      $F192                        ; 
Moveto_d            EQU      $F312                        ; 
Intensity_a         EQU      $F2AB                        ; 
Read_Btns           EQU      $F1BA                        ; 
;***************************************************************************
; Variable / RAM SECTION
;***************************************************************************
                    bss      
                    org      $c880 
countDownRaster     ds       1 
                    code     
SCALE               equ      $40 
WIDTH               equ      $40 
XPOS                equ      -$7f 
YPOS                equ      $60 
;***************************************************************************
; HEADER SECTION
;***************************************************************************
rasterIntro 
; here the cartridge program starts off
                    lda      #WIDTH +20 
                    sta      Vec_Text_Width 
                    lda      #150 
                    sta      countDownRaster 
rasterIntroLoop: 
                    jsr      voxSentence 
                    jsr      PLY_PLAY 
                    jsr      do_ym_sound2 
                    jsr      Read_Btns 
                    lda      >$c80F 
                    anda     #$f 
                    sta      >$c80F 
                    cmpa     #1 
                    bne      nOptions2 
                    jsr      editOptions 
                    lda      #WIDTH +20 
                    sta      Vec_Text_Width 
                    bra      optionsDone2 

nOptions2 
                    tsta     
                    bne      exitRaster 
optionsDone2 
                    JSR      Wait_Recal                   ; Vectrex BIOS recalibration 
                    JSR      Intensity_5F                 ; Sets the intensity of the 
                                                          ; vector beam to $5f 
                    lda      #SCALE 
                    sta      <VIA_t1_cnt_lo 
                    LDA      #YPOS                        ; Text position relative Y 
                    LDB      #XPOS                        ; Text position relative X 
                    LDU      #berzerk_data 
                    JSR      draw_raster_image            ; Vectrex BIOS print routine 
                    dec      countDownRaster 
                    beq      exitRaster 
                    BRA      rasterIntroLoop              ; and repeat forever 

exitRaster 
                    rts      

;
; expects width strength to be set to the default bios location Vec_Text_Width
; expects height strength to be set to the default bios location Vec_Text_Height
; address of raster data is expected in U
; print is done to current screen location
; 
; uses bios ram-locations  Vec_Counter_1,  Vec_Counter_2,  Vec_Counter_3
; as temporary storages
; zero delay is needed for zeroing to work correctly
; depends on the distance of the current integrator position to actual zero point
; experiment with my vectri:
;ZERO ing the integrators takes time. Measures at my vectrex show e.g.:
;If you move the beam with a to x = -127 and y = -127 at diffferent scale values, the time to reach zero:
;- scale $ff -> zero 110 cycles
;- scale $7f -> zero 75 cycles
;- scale $40 -> zero 57 cycles
;- scale $20 -> zero 53 cycles
                    direct   $d0 
SCALE_MOVE          equ      100 
draw_raster_image: 
; put move position on stack put it so, that we can load "d" directly from stack
                    pshs     d 
                    ldd      ,u++                         ; load line counter 
                    std      Vec_Counter_1                ; height counter +width counter + 
                    stb      Vec_Counter_3                ; width counter (work) 
; setup VIA raster routine
; setup rampin with auxControl 
next_line: 
; zero
                    ldd      #(%10000010)*256+$CC         ; zero the integrators 
                    stb      <VIA_cntl                    ; store zeroing values to cntl 
                                                          ; ldb #ZERO_DELAY ; and wait for zeroing to be actually done 
; reset integrators
                    clr      <VIA_port_a                  ; reset integrator offset 
; wait that zeroing surely has the desired effect!
                    sta      <VIA_port_b                  ; while waiting, zero offsets 
                    inc      <VIA_port_b 
; unzero is done by moveto_d
                    lda      #SCALE_MOVE 
                    sta      <VIA_t1_cnt_lo 
                    ldd      0,s 
;;;;;; move to d as direct code start
                    STA      VIA_port_a                   ;Store Y in D/A register 
                    LDA      #$CE                         ;Blank low, zero high? 
                    STA      VIA_cntl                     ; 
                    CLRA     
                    STA      VIA_port_b                   ;Enable mux 
                    STA      VIA_shift_reg                ;Clear shift regigster 
                    INC      VIA_port_b                   ;Disable mux 
                    STB      VIA_port_a                   ;Store X in D/A register 
                    STA      VIA_t1_cnt_hi                ;enable timer 
                    lda      Vec_Counter_2                ; reload line width 
                    sta      Vec_Counter_3 
                    lda      #-2                          ; optimized correct adder for next scan line 
                    adda     0,s                          ; done befor wait loop of move to d 
                    sta      0,s 
                    LDD      #(%10000001)*256+$40         ; mux disabled, mux sel = y int 
m2d:                BITB     VIA_int_flags                ; 
                    BEQ      m2d                          ; 
;;;;;; move to d as direct code end
; ensure y int does nothing
                    sta      <VIA_port_b                  ; to via b 
                    clr      <VIA_port_a                  ; ensure dac is 0 
                    dec      <VIA_port_b                  ; enable mux 
                                                          ; nop ; delay 
                    inc      <VIA_port_b                  ;disable mux 
                    lda      #$18                         ; a = $18, 
                    sta      <VIA_aux_cntl                ; $18: T1 OneSHotMode WITHOUT Ramp control, Shift out under System clock 
                    lda      Vec_Text_Width               ; get width 
                    sta      <VIA_port_a                  ; Send it to the D/A 
                    lda      #$01                         ; a = $01 
                    sta      <VIA_port_b                  ; Enable RAMP, disable mux 
; output is ongoing! (RAMP is enabled)
                    ldb      Vec_Counter_3                ; [5] 
                    nop                                   ; [2] wait 
                    nop                                   ; [2] wait 
oneShiftOutForward: 
                    lda      ,u+                          ; [6] get bitmap (shiftreg-data) from raster table 
                    sta      <VIA_shift_reg               ; [4] This loop needs to have exactly 18 cycles (8*2+2) 
                                                          ; one complete shiftreg output takes 16 cycles (8*2) + 2 cycles since VIA needs some rest 
                    bra      dummy1                       ; [3] 

dummy1: 
                    decb                                  ; [2] 
                    bne      oneShiftOutForward           ; [3] go back if not done for line 
                    nop                                   ; [2] delay 2 to finish last shiftout 
                    stb      <VIA_shift_reg               ; [4] b is 0 now, switch of shift 
; don't bother about ramp and dac, in the next round all will be resetted
                    lda      #$98                         ; EXIT routine 
                    sta      <VIA_aux_cntl                ; T1->PB7 enabled 
                    dec      Vec_Counter_1                ; check for last row 
                    bne      next_line                    ; branch if not last row 
                    puls     d,pc                         ; all done, correct stack 
                                                          ; rts 
;***************************************************************************
; DATA SECTION
;***************************************************************************
; format:
; height, width
; shiftreg, ...,  shiftreg
; ....
; shiftreg, ...,  shiftreg
; 
berzerk_data: 
                    db       $2D-3, $12 -1 
                    db       %00000000, %00001111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111100, %00000000 
                    db       %00000000, %00111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %00000000 
                    db       %00000000, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %10000000 
                    db       %00000001, %11111000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000111, %11000000 
                    db       %00000011, %11100000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000001, %11100000 
                    db       %00000111, %10000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %11100000 
                    db       %00000111, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %01110000 
                    db       %00001110, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %01110000 
                    db       %00011100, %00000001, %11111111, %11110000, %00111111, %11111111, %11111111, %11000000, %01111111, %00000111, %11111111, %11111111, %11111000, %00111000, %00111111, %11111000, %01110000 
                    db       %00011100, %00001111, %11111111, %11111000, %00111111, %11111111, %11111111, %11100000, %01111111, %00000111, %11111111, %11111111, %11111100, %00111000, %00111111, %11111100, %00111000 
                    db       %00111000, %00011111, %11111111, %11111000, %00111111, %11111111, %11111111, %11110000, %11111110, %00000111, %11111111, %11111111, %11111100, %00111000, %01111111, %11111110, %00111000 
                    db       %00111000, %00111100, %00000000, %01111100, %00111000, %00000000, %00000001, %11110000, %00001110, %00000111, %00000000, %00000000, %00111110, %00111000, %01110000, %00011111, %00111000 
                    db       %00110000, %01111000, %00000000, %00111100, %00111000, %00000000, %00000000, %11110000, %00001110, %00000111, %00000000, %00000000, %00011110, %00111000, %11100000, %00000111, %00011100 
                    db       %01110000, %01110000, %00000000, %01111000, %00111000, %00000000, %00000000, %11100000, %00011100, %00000111, %00000000, %00011100, %00111100, %00111000, %11100000, %00000111, %00011100 
                    db       %01110000, %01100000, %00111000, %01110000, %00111000, %00000000, %11100000, %11100000, %00011100, %00000111, %00000000, %00011100, %00111000, %00111001, %11000000, %00000011, %00011100 
                    db       %01110000, %11100000, %00111000, %11100000, %00111111, %11000000, %11100001, %11100000, %00111000, %00000111, %11111100, %00011100, %00111000, %00111011, %11000000, %00000001, %10001110 
                    db       %01100000, %11000000, %00111001, %11100000, %00111111, %11000000, %11100001, %11000000, %00111000, %00000111, %11111100, %00011100, %01111000, %00111001, %11000000, %00000001, %10001110 
                    db       %11100000, %11000000, %00111001, %11100000, %00111111, %10000000, %11100011, %10000000, %00111000, %00000111, %11111000, %00011100, %11100000, %00111000, %11100000, %00000001, %11000111 
                    db       %11100001, %11000000, %00111000, %11110000, %00111000, %00000000, %11100111, %00000000, %00111000, %00000111, %00000000, %00011100, %11100000, %00111000, %11100000, %00000000, %11000111 
                    db       %11100001, %11000000, %00111000, %01110000, %00111000, %00000000, %11100111, %00000000, %01110000, %00000111, %00000000, %00011100, %11110000, %00111000, %01110000, %00000000, %11000111 
                    db       %11100001, %11000000, %00111000, %00111000, %00111000, %00000000, %11100011, %10000000, %01110000, %00000111, %00000000, %00011100, %11110000, %00111000, %01110000, %00000000, %11000111 
                    db       %11100001, %11000000, %00111000, %00111000, %00111000, %00000000, %11100011, %10000000, %01110000, %00000111, %00000000, %00011100, %01110000, %00111000, %01110000, %00000000, %11000111 
                    db       %11100000, %11000000, %00111000, %00111100, %00111000, %00000000, %11100011, %11000000, %11100000, %00000111, %00000000, %00011100, %01111000, %00111000, %00111000, %00000000, %11000111 
                    db       %01100000, %11000000, %00111000, %00111100, %00111000, %00000000, %11100001, %11000000, %11100000, %00000111, %00000000, %00011100, %00111100, %00111000, %00111000, %00000000, %11000111 
                    db       %01100000, %11000000, %00111111, %11111100, %00111111, %11100000, %11100000, %11000000, %11100000, %00000111, %11111100, %00011100, %00111100, %00111000, %00111100, %00000001, %11000111 
                    db       %01100000, %11100000, %00111111, %11111000, %00111111, %11100000, %11100000, %11100001, %11000000, %00000111, %11111100, %00011100, %00011110, %00111000, %00011110, %00000001, %11000111 
                    db       %01110000, %01100000, %00111111, %11111000, %00111111, %11000000, %11100000, %11110001, %11000000, %00000111, %11111000, %00011100, %00011110, %00111000, %00001110, %00000001, %10001110 
                    db       %01110000, %01110000, %00000000, %00000000, %00000000, %00000000, %11100000, %01110001, %11000000, %00000000, %00000000, %00000000, %00001110, %00000000, %00000000, %00000011, %10001110 
                    db       %00110000, %00111000, %00000000, %00000000, %00000000, %00000000, %11100000, %00111001, %10000000, %00000000, %00000000, %00000000, %00001111, %00000000, %00000000, %00000111, %00011100 
                    db       %00111000, %00011110, %00000000, %00000000, %00000000, %00000000, %11100000, %00111011, %10000000, %00000000, %00000000, %00000000, %00000111, %00000000, %00000000, %00001111, %00011100 
                    db       %00111000, %00001111, %11111111, %11111111, %11111111, %11111111, %11100000, %00011011, %10000000, %00000000, %00000000, %00000000, %00000011, %10000000, %00000000, %00011110, %00011100 
                    db       %00011100, %00000011, %11111111, %11111111, %11111111, %11111111, %11100000, %00010111, %10000000, %00000000, %00000000, %00000000, %00000011, %11000000, %00000000, %11111110, %00111000 
                    db       %00011100, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000111, %11111111, %11111111, %11111111, %11111111, %11111101, %11101111, %11111111, %11111100, %00111000 
                    db       %00001110, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00001111, %11111111, %11111111, %11111111, %11111111, %11111110, %11110111, %11111111, %11111000, %01111000 
                    db       %00001111, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00011111, %11111111, %11111111, %11111111, %11111111, %11111110, %11111011, %11111111, %11000000, %11110000 
                    db       %00000111, %10000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000011, %11000000, %00000000, %00000000, %00000000, %00000000, %01111100, %00000000, %00000001, %11100000 
                    db       %00000011, %11000000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000001, %11100000, %00000000, %00000000, %00000000, %00000000, %00111110, %00000000, %00000011, %11100000 
                    db       %00000001, %11100000, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %11110000, %00000000, %00000000, %00000000, %00000000, %00011111, %00000000, %00011111, %11000000 
                    db       %00000000, %11111100, %00000000, %00000000, %00000000, %00000000, %00000000, %00000000, %01111000, %00000000, %00000000, %00000000, %00000000, %00001111, %00000000, %01111111, %00000000 
                    db       %00000000, %01111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111110, %00000000, %00000000, %00000000, %00000000, %00000011, %11111111, %11111100, %00000000 
                    db       %00000000, %00011111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %10000000, %00000000, %00000000, %00000000, %00000001, %11111111, %11110000, %00000000 
                    db       %00000000, %00000011, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11111111, %11000000, %00000000, %00000000, %00000000, %00000000, %11111111, %11100000, %00000000 
